name: "Code Scanning"

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 1'
  watch:
    types: [started]

jobs:
  name: Semgrep

on:
  # Scan changed files in PRs, block on new issues only (existing issues ignored)
  pull_request: {}

  # Scan all files on branches, block on any issues
  # push:
  #   branches: ["master", "main"]

jobs:
  semgrep:
    name: Scan
    runs-on: ubuntu-latest
    # Skip any PR created by dependabot to avoid permission issues
    if: (github.actor != 'dependabot[bot]')
    steps:
      # Fetch project source
      - uses: actions/checkout@v2

      - uses: returntocorp/semgrep-action@v1
        with:
          config: >- # more at semgrep.dev/explore
            p/security-audit
            p/secrets

        # == Optional settings in the `with:` block

        # Instead of `config:`, use rules set in Semgrep App.
        # Get your credentials from semgrep.dev/manage/settings.
        #   publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
        #   publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

        # Never fail the build due to findings on pushes.
        # Instead, just collect findings for semgrep.dev/manage/findings
        #   auditOn: push

        # Upload findings to GitHub Advanced Security Dashboard [step 1/2]
        # See also the next step.
        #   generateSarif: "1"

        # Change job timeout (default is 1800 seconds; set to 0 to disable)
        # env:
        #   SEMGREP_TIMEOUT: 300

        #Upload findings to GitHub Advanced Security Dashboard [step 2/2]
       - name: Upload SARIF file for GitHub Advanced Security Dashboard
         uses: github/codeql-action/upload-sarif@v1
         with:
           sarif_file: semgrep.sarif
         if: always()

  Trivy-Scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Build an image from Dockerfile
#        run: |
#          docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
#
#      - name: Run Trivy vulnerability scanner in docker mode
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
#          format: 'template'
#          template: '@/contrib/sarif.tpl'
#          output: 'trivy-results-docker.sarif'
#          severity: 'CRITICAL'
#
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v1
#        with:
#          sarif_file: 'trivy-results-docker.sarif'

      - name: Run Trivy vulnerability scanner in fs mode
        uses: anandg112/trivy-action@feat/add-skip-dirs-option
        with:
          scan-type: 'fs'
#          scan-ref: '.'
          ignore-unfixed: true
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-fs.sarif'
          severity: 'CRITICAL'
          skip-dirs: "ignored-dir"

#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v1
#        with:
#          sarif_file: 'trivy-results-fs.sarif'

      - name: DEBUG Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'debug-trivy-results.sarif'
